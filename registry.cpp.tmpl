/*************************************************************************
 * odil - Copyright (C) Universite de Strasbourg
 * Distributed under the terms of the CeCILL-B license, as published by
 * the CEA-CNRS-INRIA. Refer to the LICENSE file or to
 * http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html
 * for details.
 ************************************************************************/

#include <cstdint>
#include <map>
#include <string>

#include "odil/registry.h"

#include "odil/ElementsDictionary.h"
#include "odil/Tag.h"
#include "odil/VR.h"
#include "odil/UIDsDictionary.h"

namespace odil
{

namespace registry
{

struct RawElementsDictionaryEntry
{
    ElementsDictionaryKey key;
    char const * name;
    char const * keyword;
    char const * vr;
    char const * vm;
};

ElementsDictionary create_public_dictionary()
{

    RawElementsDictionaryEntry raw_entries[] = {
{% for entry in elements_dictionary %}
        { {% if entry[0] is string -%}
            std::string("{{ entry[0] }}")
          {% elif entry[0] is sequence -%}
            Tag({{ "0x%04x, 0x%04x"|format(*entry[0]) }})
          {%- endif %},
          "{{ entry[1] }}", "{{ entry[2] }}",  "{{ entry[3] }}", "{{ entry[4] }}" },
{% endfor %}
    };

    ElementsDictionary public_dictionary;

    unsigned long const count = sizeof(raw_entries)/sizeof(RawElementsDictionaryEntry);
    for(unsigned long i=0; i<count; ++i)
    {
        RawElementsDictionaryEntry const & raw_entry = raw_entries[i];
        ElementsDictionaryEntry const entry(
            raw_entry.name, raw_entry.keyword, raw_entry.vr, raw_entry.vm);
        public_dictionary.insert(
            std::pair<ElementsDictionaryKey, ElementsDictionaryEntry>(
                raw_entry.key, entry));
    }

    return public_dictionary;
}

std::map<std::string, Tag> create_public_tags()
{

    RawElementsDictionaryEntry raw_entries[] = {
{% for entry in elements_dictionary %}
    {% if not entry[0] is string -%}
        { Tag({{ "0x%04x, 0x%04x"|format(*entry[0]) }}),
          "{{ entry[1] }}", "{{ entry[2] }}",  "{{ entry[3] }}", "{{ entry[4] }}" },
    {%- endif %}
{% endfor %}
    };

    std::map<std::string, Tag> public_tags;

    unsigned long const count = sizeof(raw_entries)/sizeof(RawElementsDictionaryEntry);
    for(unsigned long i=0; i<count; ++i)
    {
        RawElementsDictionaryEntry const & raw_entry = raw_entries[i];
        public_tags.insert(std::make_pair(raw_entry.keyword, raw_entry.key.get_tag()));
    }

    return public_tags;
}

struct RawUIDsDictionaryEntry
{
    char const * uid;
    char const * name;
    char const * keyword;
    char const * type;
};

UIDsDictionary create_uids_dictionary()
{

    RawUIDsDictionaryEntry raw_entries[] = {
{% for entry in uids %}
        { "{{ entry[0] }}", "{{ entry[1] }}", "{{ entry[2] }}",  "{{ entry[3] }}" },
{% endfor %}
    };

    UIDsDictionary uids_dictionary;

    unsigned long const count = sizeof(raw_entries)/sizeof(RawUIDsDictionaryEntry);
    for(unsigned long i=0; i<count; ++i)
    {
        RawUIDsDictionaryEntry const & raw_entry = raw_entries[i];
        UIDsDictionaryEntry const entry(
            raw_entry.name, raw_entry.keyword, raw_entry.type);
        uids_dictionary.insert(std::pair<std::string, UIDsDictionaryEntry>(raw_entry.uid, entry));
    }

    return uids_dictionary;
}

ElementsDictionary public_dictionary=create_public_dictionary();
std::map<std::string, Tag> public_tags=create_public_tags();
UIDsDictionary uids_dictionary=create_uids_dictionary();

}

}
